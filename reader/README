# README: Strom Reader (`strom_reader.py`)

Der `strom_reader.py` ist ein Python-Skript, das für das Auslesen von Stromdaten von einem Zähler verantwortlich ist. Es sammelt die Daten und speichert sie in einer SQLite-Datenbank. Dieses Skript wird in einem Docker-Container ausgeführt, um eine einfache Bereitstellung und Ausführung zu ermöglichen.

---

## **Funktionen**
- **Auslesen von Stromdaten**: Das Skript liest Daten von einem seriellen Port (z. B. `/dev/ttyUSB0`) aus.
- **Speichern der Daten**: Die ausgelesenen Daten werden in einer SQLite-Datenbank gespeichert.
- **Logging**: Das Skript protokolliert alle relevanten Ereignisse und Fehler in einer Logdatei.

---

## **Voraussetzungen**
- Docker und Docker Compose müssen auf dem System installiert sein.
- Der Zähler muss über den seriellen Port mit dem System verbunden sein.

---

## **Verzeichnisstruktur**
- **`strom_reader.py`**: Das Hauptskript für das Auslesen der Stromdaten.
- **`Dockerfile`**: Definiert das Docker-Image für den Strom Reader.
- **`docker-compose.yml`**: Konfiguriert den Docker-Container und seine Umgebung.

---

## **Einrichtung**

### 1. **Docker-Container bauen**
Wechsle in das Verzeichnis reader und baue den Docker-Container:

```bash
docker compose build
```

### 2. **Docker-Container starten**
Starte den Docker-Container:

```bash
docker compose up
```

### 3. **Docker-Container im Hintergrund starten**
Falls du den Container im Hintergrund ausführen möchtest, verwende:

```bash
docker compose up -d
```

---

## **Konfiguration**

### **Umgebungsvariablen**
Die folgenden Umgebungsvariablen können in der `docker-compose.yml` oder direkt im Container gesetzt werden:
- **`PORT`**: Der serielle Port, an dem der Zähler angeschlossen ist (z. B. `/dev/ttyUSB0`).
- **`BAUDRATE`**: Die Baudrate für die serielle Kommunikation (Standard: `9600`).
- **`LOGFILE`**: Der Pfad zur Logdatei (z. B. `/app/data/logs/strom_reader.log`).

### **Docker-Volumes**
Die SQLite-Datenbank und Logdateien werden in einem Volume gespeichert, um Daten auch nach dem Neustart des Containers zu behalten. Beispiel in der `docker-compose.yml`:
```yaml
volumes:
  - ./data:/app/data
```

---

## **Logging**
Das Skript protokolliert alle Ereignisse in der Logdatei, die standardmäßig unter `/app/data/logs/strom_reader.log` gespeichert wird. Die Logs können verwendet werden, um Fehler zu debuggen oder den Betrieb zu überwachen.

---

## **Beenden des Containers**
Um den Docker-Container zu stoppen, verwende:

```bash
docker compose down
```

---

## **Fehlerbehebung**
- **Problem: Der Container startet nicht.**
  - Überprüfe, ob der serielle Port korrekt konfiguriert ist.
  - Stelle sicher, dass der Benutzer Zugriff auf den seriellen Port hat (z. B. durch Hinzufügen zur Gruppe `dialout`).

- **Problem: Keine Daten werden ausgelesen.**
  - Überprüfe die Verbindung zum Zähler.
  - Stelle sicher, dass die Baudrate korrekt ist.

---

## **Zusammenfassung**
Der `strom_reader.py` liest Stromdaten von einem Zähler aus und speichert sie in einer SQLite-Datenbank. Durch die Verwendung von Docker ist die Bereitstellung und Ausführung des Skripts einfach und portabel.