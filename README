# README: Einrichtung und Nutzung des Projekts

Dieses Projekt dient zur Verwaltung und Analyse von Stromdaten. Es bietet drei Hauptfunktionen: das Bauen des Dashboards, das Bauen des Readers und das Starten eines Dumps des Leseroutputs.

Detailinformationen finden sich auch in den README der einzelnen Komponenten:

Detailinformationen finden sich auch in den README-Dateien der einzelnen Komponenten:

Dashboard: dasboard/nginx/README
Beschreibt die Funktionen von Nginx, das f√ºr die Bereitstellung des Dashboards und die Weiterleitung von API-Anfragen zust√§ndig ist.

Dashboard-Backend: dashboard/dashboard-backend/README
Beschreibt die API-Endpunkte, die vom Backend bereitgestellt werden, um Daten f√ºr das Dashboard und andere Anwendungen bereitzustellen.

Reader: reader/README
Beschreibt den strom_reader.py, der f√ºr das Auslesen der Stromdaten von einem Z√§hler und das Speichern in einer SQLite-Datenbank verantwortlich ist.

Reader Dump: reader-dump/README
Beschreibt den reader-raw-dump.py, der Rohdaten des Z√§hlers ausliest und in einer Logdatei speichert. Dies ist besonders n√ºtzlich f√ºr Debugging- und Analysezwecke.

## Einrichtung

### 1. Skript strom.sh anlegen
Das Skript strom.sh ist das zentrale Steuerungsskript f√ºr das Projekt. Es muss im Projektverzeichnis erstellt werden. Der Inhalt des Skripts ist bereits im Repository enthalten.

### 2. Skript ausf√ºhrbar machen
Damit das Skript ausgef√ºhrt werden kann, muss es ausf√ºhrbar gemacht werden. F√ºhre dazu folgenden Befehl im Terminal aus:

```bash
chmod +x strom.sh
```

### 3. Skript ausf√ºhren
Das Skript kann nun gestartet werden:

```bash
./strom.sh
```

## Nutzung

Nach dem Start des Skripts wird ein Auswahlmen√º angezeigt. Es stehen drei Optionen zur Verf√ºgung:

### Option 1: Dashboard bauen
Das Dashboard ist die Benutzeroberfl√§che zur Visualisierung der Stromdaten. Es zeigt Informationen wie den aktuellen Stromverbrauch, historische Daten und Statistiken an. Diese Option f√ºhrt folgende Schritte aus:
- Wechselt in das Verzeichnis dashboard
- Baut die Docker-Container f√ºr das Dashboard neu und startet sie im Hintergrund.

### Option 2: Reader bauen
Der Reader ist f√ºr das Auslesen der Stromdaten von einem Z√§hler verantwortlich. Er sammelt die Daten und speichert sie in der Datenbank. Diese Option f√ºhrt folgende Schritte aus:
- Wechselt in das Verzeichnis reader.
- Baut die Docker-Container f√ºr den Reader neu und startet sie im Hintergrund.

### Option 3: Dump des Leseroutputs
Der Dump des Leseroutputs dient dazu, die Rohdaten des Z√§hlers direkt auszulesen und anzuzeigen. Dies ist n√ºtzlich f√ºr Debugging-Zwecke oder zur Analyse der Rohdaten. Diese Option f√ºhrt folgende Schritte aus:
- Wechselt in das Verzeichnis reader-dump.
- Baut die Docker-Container f√ºr den Dump neu und startet sie im Vordergrund (ohne `-d`), sodass die Ausgabe direkt im Terminal sichtbar ist.

## Hinweise
- Stelle sicher, dass Docker und Docker Compose auf deinem System installiert und korrekt konfiguriert sind.
- Das Skript aktualisiert automatisch das Repository, indem es √Ñnderungen vom angegebenen Git-Branch (`main` standardm√§√üig) abruft.

## Beispielausgabe
Nach dem Start des Skripts wird folgendes Men√º angezeigt:

```plaintext
Bitte w√§hlen Sie eine Option:
1 = Dashboard bauen
2 = Reader bauen
3 = Dump des Leseroutputs
Ihre Auswahl:
```

W√§hle die gew√ºnschte Option durch Eingabe von `1`, `2` oder `3` und dr√ºcke Enter.

Viel Erfolg bei der Nutzung des Projekts! üöÄ